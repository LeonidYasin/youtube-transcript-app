document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('transcriptForm');
    const videoUrlInput = document.getElementById('videoUrl');
    const languageSelect = document.getElementById('language');
    const submitBtn = document.getElementById('submitBtn');
    const loadingDiv = document.getElementById('loading');
    const resultDiv = document.getElementById('result');
    
    // Log to server function
    async function logToServer(level, message, data = {}) {
        try {
            await fetch('/api/log', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    level,
                    message,
                    ...data,
                    timestamp: new Date().toISOString()
                })
            });
        } catch (error) {
            console.error('Error logging to server:', error);
        }
    }
    
    // Extract video ID from YouTube URL
    function extractVideoId(url) {
        console.log('Extracting video ID from URL:', url);
        
        // Handle youtu.be URLs
        if (url.includes('youtu.be/')) {
            const match = url.match(/youtu\.be\/([a-zA-Z0-9_-]+)/);
            if (match && match[1]) {
                console.log('Extracted from youtu.be URL:', match[1]);
                return match[1];
            }
        }
        
        try {
            const parsedUrl = new URL(url);
            
            // Handle youtu.be URLs (again, just in case)
            if (parsedUrl.hostname === 'youtu.be') {
                const id = parsedUrl.pathname.slice(1);
                if (id) {
                    console.log('Extracted from youtu.be path:', id);
                    return id.substring(0, 11);
                }
            }
            
            // Handle /embed/ URLs
            const embedMatch = parsedUrl.pathname.match(/^\/embed\/([a-zA-Z0-9_-]+)/);
            if (embedMatch && embedMatch[1]) {
                console.log('Extracted from embed URL:', embedMatch[1]);
                return embedMatch[1];
            }
            
            // If we have a v= parameter, try to use that
            const vParam = parsedUrl.searchParams.get('v');
            if (vParam && vParam.length >= 11) {
                console.log('Extracted from v parameter:', vParam);
                return vParam.substring(0, 11);
            }
            
            // Last resort: Look for an 11-char ID in the path
            const idMatch = parsedUrl.pathname.match(/(^|\/)([a-zA-Z0-9_-]{11})($|\/|\?|#)/);
            if (idMatch && idMatch[2]) {
                console.log('Extracted ID from path:', idMatch[2]);
                return idMatch[2];
            }
            
            console.error('Could not extract video ID from URL:', url);
            return null;
        } catch (error) {
            console.error('Error parsing URL:', error);
            return null;
        }
    }
    
    // Show transcript function
    function showTranscript(data) {
        const languageNames = {
            'en': 'English',
            'ru': 'Русский',
            'es': 'Español',
            'fr': 'Français',
            'de': 'Deutsch',
            'it': 'Italiano',
            'pt': 'Português',
            'zh-Hans': '中文 (简体)',
            'zh-Hant': '中文 (繁體)',
            'ja': '日本語',
            'ko': '한국어',
            'ar': 'العربية',
            'he': 'עברית'
        };
        
        const langName = languageNames[data.language] || data.language;
        const isAuto = data.language === 'auto';
        const isAutoGenerated = data.auto_generated ? ' (Auto-generated)' : '';
        
        // First escape HTML to prevent XSS
        const escapeHtml = (unsafe) => {
            if (!unsafe) return '';
            return String(unsafe)
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        };
        
        // Create the header with language info
        const headerHtml = `
            <div class="success">
                <p><strong>Language:</strong> ${escapeHtml(langName)}${isAutoGenerated}${isAuto ? ' (Auto-detected)' : ''}</p>
            </div>`;
        
        // Create a container for the transcript
        resultDiv.innerHTML = headerHtml + '<div id="transcriptContainer" class="transcript"></div>';
        const container = document.getElementById('transcriptContainer');
        
        // Process the transcript in chunks to avoid blocking the UI
        try {
            const transcriptText = data.transcript || '';
            const chunkSize = 1000; // Process 1000 characters at a time
            let position = 0;
            
            function processChunk() {
                if (position >= transcriptText.length) {
                    return; // Done processing
                }
                
                // Get the next chunk of text
                const chunk = transcriptText.substr(position, chunkSize);
                position += chunkSize;
                
                // Process this chunk
                const safeText = escapeHtml(chunk);
                const formattedChunk = safeText
                    .split(/[\r\n]+/)
                    .map(line => line.trim())
                    .filter(line => line.length > 0)
                    .join('<br>');
                
                // Append to container
                container.innerHTML += formattedChunk;
                
                // Process next chunk on the next animation frame to keep the UI responsive
                if (position < transcriptText.length) {
                    requestAnimationFrame(processChunk);
                }
            }
            
            // Start processing chunks
            processChunk();
            
        } catch (error) {
            console.error('Error processing transcript:', error);
            container.innerHTML = 'Error: Could not process transcript. The transcript might be too large.';
        }
    }
    
    // Show error function
    function showError(message) {
        resultDiv.innerHTML = `<div class="error">${message}</div>`;
    }
    
    // Set loading state
    function setLoading(isLoading) {
        if (isLoading) {
            submitBtn.disabled = true;
            loadingDiv.style.display = 'block';
        } else {
            submitBtn.disabled = false;
            loadingDiv.style.display = 'none';
        }
    }
    
    // Form submission handler
    form.addEventListener('submit', async function(e) {
        console.log('=== FORM SUBMIT EVENT TRIGGERED ===');
        console.log('Event type:', e.type);
        
        // Prevent default form submission
        e.preventDefault();
        console.log('Default form submission prevented');
        
        // Show loading state
        setLoading(true);
        resultDiv.innerHTML = '';
        
        const videoUrl = videoUrlInput.value.trim();
        const language = languageSelect.value;
        
        // Log to server
        logToServer('info', 'Form submission started', {
            videoUrl,
            language,
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent
        });
        
        console.log('Starting form processing...');
        
        if (!videoUrl) {
            const errorMsg = 'Please enter a YouTube URL';
            logToServer('error', errorMsg);
            showError(errorMsg);
            setLoading(false);
            return;
        }
        
        console.log('Extracting video ID from URL:', videoUrl);
        const videoId = extractVideoId(videoUrl);
        console.log('Extracted video ID:', videoId);
        
        logToServer('debug', 'Extracted video ID', { 
            videoId, 
            videoUrl,
            timestamp: new Date().toISOString()
        });
        
        if (!videoId) {
            const errorMsg = 'Invalid YouTube URL';
            console.error('Failed to extract video ID from URL:', videoUrl);
            logToServer('error', errorMsg, { 
                videoUrl,
                timestamp: new Date().toISOString()
            });
            showError(errorMsg + '. Example: https://www.youtube.com/watch?v=dQw4w9WgXcQ');
            setLoading(false);
            return;
        }
        
        try {
            console.log('Sending request to server...');
            const response = await fetch(`/api/transcript?url=${encodeURIComponent(videoId)}&language=${encodeURIComponent(language)}`);
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.message || 'Failed to fetch transcript');
            }
            
            console.log('Received response from server:', data);
            logToServer('info', 'Transcript received', { 
                videoId,
                language: data.language,
                autoGenerated: data.auto_generated,
                transcriptLength: data.transcript ? data.transcript.length : 0
            });
            
            showTranscript(data);
        } catch (error) {
            console.error('Error fetching transcript:', error);
            logToServer('error', 'Error in form submission', { 
                error: error.message,
                stack: error.stack
            });
            showError(error.message || 'An error occurred while fetching the transcript');
        } finally {
            setLoading(false);
        }
    });
});
